

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Graph {


    private Map<String, AdjList> graph;


 
    public static void main(String[] args) {
        GBFS("S", "G1"); 

    }

 
    public static void GBFS(String start, String end) {
        Graph path = new Graph();
        path.init();
        AdjList adjList = path.graph.get(start);
        System.out.println("Greedy Best First Search");
        AdjNode startNode = findNode(adjList, start);
        System.out.print( start + "(" + startNode.cost + ")" + "-->");
        int totalCost = 0; 
        while (adjList.size() > 0) {
            AdjNode nextNode = adjList.poll();
            int nodeCost = nextNode.cost;
            totalCost += nodeCost;

            System.out.print(nextNode.name + "(" + nodeCost + ")-->");
            adjList = path.graph.get(nextNode.name);

            if (isExist(adjList, end)) {
                int lastNodeCost = adjList.poll().cost;
                totalCost += lastNodeCost;
                System.out.println(end + "(" + lastNodeCost + ")");
                System.out.println("Total cost: " + totalCost);
                return;
            }
        }
    }

    public void init() {
        graph = new HashMap<>();

        String name = "S";
        AdjList adjList = new AdjList();
        adjList.add(new AdjNode("S", 9));
        adjList.add(new AdjNode("A", 6));
        adjList.add(new AdjNode("C", 2));
        adjList.add(new AdjNode("D", 5));
        graph.put(name, adjList);

        name = "C";
        adjList = new AdjList();
        adjList.add(new AdjNode("B", 2));
        adjList.add(new AdjNode("J", 1));
        adjList.add(new AdjNode("F", 3));
        graph.put(name, adjList);

        name = "J";
        adjList = new AdjList();
        adjList.add(new AdjNode("G1", 0));
        graph.put(name, adjList);
    }

  
    public static boolean isExist(AdjList adjList, String name) {
        for (AdjNode n :
                adjList) {
            if (n.name.equals(name)) {
                return true;
            }
        }
        return false;
    }


    public static AdjNode findNode(AdjList adjList, String name) {
        for (AdjNode n :
                adjList) {
            if (n.name.equals(name)) {
                return n;
            }
        }
        return null;
    }

}


class AdjList extends PriorityQueue<AdjNode> {

}


class AdjNode implements Comparable<AdjNode> {
    String name;
    int cost;

    public AdjNode(String name, int cost) {
        this.name = name;
        this.cost = cost;
    }

    @Override
    public int compareTo(AdjNode o) {
        return Integer.compare(cost, o.cost);
    }

    @Override
    public String toString() {
        return "AdjNode{" +
                "name='" + name + '\'' +
                ", cost=" + cost +
                '}';
    }
}
